// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

// Author: Jonathan Henk
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // clocked inputs
    DFF(in=load, out=loadtm1);
    Register(in=in, load=load, out=inputm1); // in_t-1
    Register(in[0..14]=address[0..14], in[15]=false, load=load, out=addrtm1, out[13]=addrtm13, out[14]=addrtm14); // addr t-1

    Mux16(a[0..14]=address[0..14], a[15]=false, b=addrtm1, sel=loadtm1, out[0..13]=curAddrRAM, out[0..12]=curAddrScreen);

    // RAM, Screen, KBD interfaces
    RAM16K(in=inputm1, load=loadRam, address=curAddrRAM, out=outRam);
    Screen(in=inputm1, load=loadScreen, address=curAddrScreen, out=outScreen);
    Keyboard(out=outKbd);

    // Decide if screen or RAM load pin is asserted based on high order bits
    Not(in=addrtm13, out=not13);
    And(a=addrtm14, b=not13, out=loadChooser);
    DMux(in=loadtm1, sel=loadChooser, a=loadRam, b=loadScreen);

    // Decide output (RAM, Screen, Keyboard)
    Mux4Way16(a=outRam, b=false, c=outScreen, d=outKbd, sel[0..1]=address[13..14], out=out);
}